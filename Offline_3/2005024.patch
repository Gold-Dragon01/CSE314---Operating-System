diff --git a/Makefile b/Makefile
index 62fd0f8..8d385d8 100644
--- a/Makefile
+++ b/Makefile
@@ -139,7 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_dummyproc\
+	$U/_testprocinfo\
+	
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
 
@@ -160,7 +162,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..b4e9847 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define DEFAULT_TICKETS 10
+#define TIME_LIMIT_0    2
+#define TIME_LIMIT_1    4
+#define WAIT_THRESH     6
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..389ecd6 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -145,7 +145,13 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  p->org_tickets = DEFAULT_TICKETS;
+  p->curr_tickets = DEFAULT_TICKETS;
+  p->qu = 0;
+  p->wait_time = 0;
+  p->run_time = 0;
+  p->times_scheduled = 0;
+  p->q0 = p->q1 = 0;
   return p;
 }
 
@@ -322,6 +328,9 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  np->org_tickets = p->org_tickets;
+  np->curr_tickets = p->org_tickets;
+
   return pid;
 }
 
@@ -444,7 +453,7 @@ wait(uint64 addr)
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *p,*q;
   struct cpu *c = mycpu();
 
   c->proc = 0;
@@ -456,17 +465,36 @@ scheduler(void)
 
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if(p->state == RUNNABLE && p->qu == 1) {
+        p->wait_time = 0;
+        p->times_scheduled++;
+        while(p->state == RUNNABLE && p->run_time < TIME_LIMIT_1){
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+          p->state = RUNNING;
+          c->proc = p;
+          swtch(&c->context, &p->context);
+          for(q = proc; q< &proc[NPROC];q++){
+            if(q != p){
+               q->wait_time++;
+               if(q->wait_time > WAIT_THRESH){ 
+                q->qu = 0;
+                q->wait_time = 0; 
+               }
+            }
+          }
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          p->run_time++;
+          p->q1++;
+
+          c->proc = 0;
+        }
+        if(p->run_time < TIME_LIMIT_1){
+          p->qu = 0;
+        }
+        p->run_time = 0;
       }
       release(&p->lock);
     }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ea0ee96 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int org_tickets;
+  int curr_tickets;
+  int qu;
+  int wait_time;
+  int run_time;
+  int q0,q1;
+  int times_scheduled;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..5865b84
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,18 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+#include "types.h"
+
+struct pstat {
+  int pid[NPROC];    // the process ID of each process 
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC];  // which queue the process is currently in
+  int waiting_time[NPROC];   // the time each process has spent waiting before being scheduled
+  int running_time[NPROC]; // Number of times the process was scheduled before its time slice was used
+  int times_scheduled[NPROC];   // the total number of times this process was scheduled
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC]; // the number of tickets each process currently has
+  uint queue_ticks[NPROC][2];   // the total number of ticks each process has spent in each queue
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6f86681 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..edc162b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22
+#define SYS_getpinfo  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..7f6323c 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,9 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
+
+extern struct proc proc[NPROC];
 
 uint64
 sys_exit(void)
@@ -91,3 +94,43 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_getpinfo(void){
+  uint64 addr;
+  argaddr(0,&addr);
+  struct pstat ps;
+  struct proc *p;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    ps.pid[i] = p->pid; 
+    if(p->state == RUNNABLE || p->state == RUNNING) {
+       ps.inuse[i] = 1;
+    }
+    else ps.inuse[i] = 0;
+    ps.inQ[i] = p->qu;
+    ps.waiting_time[i] = p->wait_time;
+    ps.running_time[i] = p->run_time;
+    ps.times_scheduled[i] = p->times_scheduled;
+    ps.tickets_current[i] = p->curr_tickets;
+    ps.tickets_original[i] = p->org_tickets;
+    ps.queue_ticks[i][0] = p->q0;
+    ps.queue_ticks[i][1] = p->q1;
+    release(&p->lock);
+    i++;
+  }
+  p = myproc();
+  return copyout(p->pagetable,addr,(char *)&ps,sizeof(struct pstat));
+}
+
+uint64
+sys_settickets(void){
+  int n;
+  argint(0,&n);
+  struct proc *p = myproc();
+  if(n < 1) return -1;
+  p->org_tickets = n;
+  p->curr_tickets = n;
+  return 0;
+}
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..b043a7f
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[]){
+    int tickets = atoi(argv[1]);
+    int lpcount = atoi(argv[2]);
+    settickets(tickets);
+    for(int i=1;i<=5;i++){
+        if(fork() == 0){
+            for(int j = 1;j<=lpcount;j++){
+                if(j%100 == 0){
+                    sleep(5);
+                }
+            }
+            exit(0);
+        }
+    }
+    for(int i = 1;i<=lpcount;i++){    
+    }
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..a4be0c2
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[]){
+    struct pstat ps;
+    getpinfo(&ps);
+
+    printf("PID | In Use | In Q | Waiting time | Running time | # Times Scheduled | Original Tickets | Current Tickets | q0 | q1\n");
+    printf("---------------------------------------------------------------------------------------------------------------------\n");
+
+    for (int i = 0; i < NPROC; i++) {
+        if(ps.pid[i] != 0){
+            printf("%d   | %d      | %d    | %d\t\t   | %d\t\t  | %d\t\t      | %d\t\t | %d\t\t   | %d  | %d\n",
+                ps.pid[i], ps.inuse[i], ps.inQ[i], ps.waiting_time[i],
+                ps.running_time[i], ps.times_scheduled[i], ps.tickets_original[i],
+                ps.tickets_current[i], ps.queue_ticks[i][0], ps.queue_ticks[i][1]);
+        }
+    }
+
+}
+
diff --git a/user/user.h b/user/user.h
index 04013ca..063aee0 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,7 @@
+#include "kernel/types.h"
+
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +25,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
